{
  "icon": "assets/icons/opentofu_logo_universal.png",
  "name": "opentofu",
  "displayName": "OpenTofu",
  "description": "Syntax highlighting and autocompletion for OpenTofu",
  "version": "0.1.1",
  "publisher": "gamunu",
  "license": "MPL-2.0",
  "preview": false,
  "private": true,
  "extensionKind": [
    "workspace"
  ],
  "engines": {
    "npm": "~9.X",
    "node": "~18.X",
    "vscode": "^1.82.3"
  },
  "langServer": {
    "version": "0.32.6"
  },
  "syntax": {
    "version": "0.4.2"
  },
  "qna": "https://github.com/gamunu/vscode-opentofu/discussions/categories/q-a",
  "bugs": {
    "url": "https://github.com/gamunu/vscode-opentofu/issues",
    "email": "support@fastcode.io"
  },
  "categories": [
    "Programming Languages",
    "Other",
    "Formatters",
    "Linters"
  ],
  "keywords": [
    "devops",
    "opentofu",
    "hcl",
    "tofu"
  ],
  "galleryBanner": {
    "color": "#FFF",
    "theme": "light"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/gamunu/vscode-opentofu.git"
  },
  "activationEvents": [
    "onView:opentofu-modules",
    "workspaceContains:**/*.tf",
    "workspaceContains:**/*.tfvars"
  ],
  "main": "./out/extension",
  "browser": "./out/web/extension",
  "contributes": {
    "languages": [
      {
        "id": "terraform",
        "aliases": [
          "OpenTofu",
          "opentofu",
          "tofu",
          "hcl"
        ],
        "extensions": [
          ".tf"
        ],
        "configuration": "./language-configuration.json"
      },
      {
        "id": "terraform-vars",
        "extensions": [
          ".tfvars"
        ],
        "configuration": "./language-configuration.json"
      },
      {
        "id": "json",
        "extensions": [
          ".tfstate"
        ]
      }
    ],
    "grammars": [
      {
        "language": "terraform",
        "scopeName": "source.hcl.terraform",
        "path": "./syntaxes/terraform.tmGrammar.json"
      },
      {
        "language": "terraform-vars",
        "scopeName": "source.hcl.terraform",
        "path": "./syntaxes/terraform.tmGrammar.json"
      }
    ],
    "semanticTokenTypes": [
      {
        "id": "hcl-attrName",
        "superType": "property",
        "description": "Attribute name"
      },
      {
        "id": "hcl-blockType",
        "superType": "type",
        "description": "Block type"
      },
      {
        "id": "hcl-blockLabel",
        "superType": "enumMember",
        "description": "Block label"
      },
      {
        "id": "hcl-bool",
        "superType": "keyword",
        "description": "Boolean"
      },
      {
        "id": "hcl-string",
        "superType": "string",
        "description": "String"
      },
      {
        "id": "hcl-number",
        "superType": "number",
        "description": "Number"
      },
      {
        "id": "hcl-objectKey",
        "superType": "parameter",
        "description": "Object key"
      },
      {
        "id": "hcl-mapKey",
        "superType": "parameter",
        "description": "Map key"
      },
      {
        "id": "hcl-keyword",
        "superType": "variable",
        "description": "Keyword"
      },
      {
        "id": "hcl-referenceStep",
        "superType": "variable",
        "description": "Reference step"
      },
      {
        "id": "hcl-typeComplex",
        "superType": "keyword",
        "description": "Type (complex)"
      },
      {
        "id": "hcl-typePrimitive",
        "superType": "keyword",
        "description": "Type (primitive)"
      },
      {
        "id": "hcl-functionName",
        "superType": "function",
        "description": "Function name"
      }
    ],
    "semanticTokenScopes": [
      {
        "scopes": {
          "hcl-attrName": [
            "variable.other.property"
          ],
          "hcl-blockType": [
            "entity.name.type"
          ],
          "hcl-blockLabel": [
            "variable.other.enummember"
          ],
          "hcl-bool": [
            "keyword.control"
          ],
          "hcl-string": [
            "string"
          ],
          "hcl-number": [
            "constant.numeric"
          ],
          "hcl-objectKey": [
            "variable.parameter"
          ],
          "hcl-mapKey": [
            "variable.parameter"
          ],
          "hcl-keyword": [
            "keyword.control"
          ],
          "hcl-referenceStep": [
            "variable.other.readwrite"
          ],
          "hcl-typeComplex": [
            "keyword.control"
          ],
          "hcl-typePrimitive": [
            "keyword.control"
          ],
          "hcl-functionName": [
            "support.function"
          ]
        }
      }
    ],
    "semanticTokenModifiers": [
      {
        "id": "hcl-dependent",
        "description": "Dependent"
      },
      {
        "id": "terraform-data",
        "description": "Data source"
      },
      {
        "id": "terraform-locals",
        "description": "Locals"
      },
      {
        "id": "terraform-module",
        "description": "Module"
      },
      {
        "id": "terraform-output",
        "description": "Output"
      },
      {
        "id": "terraform-provider",
        "description": "Provider"
      },
      {
        "id": "terraform-resource",
        "description": "Resource"
      },
      {
        "id": "terraform-provisioner",
        "description": "Provisioner"
      },
      {
        "id": "terraform-connection",
        "description": "Connection"
      },
      {
        "id": "terraform-variable",
        "description": "Variable"
      },
      {
        "id": "terraform-terraform",
        "description": "Terraform"
      },
      {
        "id": "terraform-backend",
        "description": "Backend"
      },
      {
        "id": "terraform-name",
        "description": "Name"
      },
      {
        "id": "terraform-type",
        "description": "Type"
      },
      {
        "id": "terraform-requiredProviders",
        "description": "Required providers"
      }
    ],
    "icons": {
      "run-status-running": {
        "description": "Run Status icon",
        "default": {
          "fontPath": "./assets/icons/running.woff",
          "fontCharacter": "D"
        }
      }
    },
    "snippets": [
      {
        "language": "terraform",
        "path": "./snippets/opentofu.json"
      }
    ],
    "configuration": [
      {
        "title": "General",
        "order": 0,
        "properties": {
          "opentofu.codelens.referenceCount": {
            "scope": "window",
            "type": "boolean",
            "default": false,
            "description": "Display reference counts above top level blocks and attributes."
          },
          "opentofu.validation.enableEnhancedValidation": {
            "scope": "window",
            "type": "boolean",
            "default": true,
            "description": "Enable enhanced validation of OpenTofu files and modules"
          }
        }
      },
      {
        "title": "Language Server",
        "order": 1,
        "properties": {
          "opentofu.languageServer.enable": {
            "scope": "window",
            "order": "0",
            "type": "boolean",
            "default": true,
            "description": "Enable OpenTofu Language Server"
          },
          "opentofu.languageServer.path": {
            "order": "1",
            "scope": "machine",
            "type": "string",
            "default": "",
            "description": "Path to the OpenTofu Language Server binary (optional)"
          },
          "opentofu.languageServer.args": {
            "order": "2",
            "scope": "machine",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "serve"
            ],
            "description": "Arguments to pass to language server binary"
          },
          "opentofu.languageServer.tcp.port": {
            "order": 4,
            "type": [
              "number",
              null
            ],
            "scope": "machine",
            "default": null,
            "markdownDescription": "Language server TCP port to connect to. This is not compatible with `#opentofu.languageServer.path#`. This is used when you want the extension to connect via TCP to an already running language server process."
          },
          "opentofu.languageServer.ignoreSingleFileWarning": {
            "order": "3",
            "scope": "window",
            "type": "boolean",
            "default": false,
            "description": "Enable warning when opening a single OpenTofu file instead of a OpenTofu folder. Enabling this will prevent the message being sent"
          },
          "opentofu.languageServer.indexing.ignorePaths": {
            "scope": "machine",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Per-workspace list of paths for the language server to ignore when indexing files"
          },
          "opentofu.languageServer.indexing.ignoreDirectoryNames": {
            "scope": "machine",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Per-workspace list of directory names for the language server to ignore when indexing files"
          }
        }
      },
      {
        "title": "OpenTofu Features",
        "order": 3,
        "properties": {
          "opentofu.languageServer.opentofu.path": {
            "order": 0,
            "scope": "machine",
            "type": "string",
            "description": "Path to the OpenTofu binary used by the OpenTofu Language Server"
          },
          "opentofu.languageServer.opentofu.timeout": {
            "order": 1,
            "scope": "machine",
            "type": "string",
            "description": "Overrides OpenTofu execution timeout (e.g. 30s) used by the OpenTofu Language Server"
          },
          "opentofu.languageServer.opentofu.logFilePath": {
            "order": 2,
            "scope": "machine",
            "type": "string",
            "markdownDescription": "Path to a file (`TF_LOG_PATH`) for OpenTofu executions to be logged used by the the OpenTofu Language Server. Support for variables (e.g. timestamp, pid, ppid) via Go template syntax `{{varName}}`"
          }
        }
      },
      {
        "title": "Experimental Features",
        "order": 4,
        "properties": {
          "opentofu.experimentalFeatures.validateOnSave": {
            "description": "Enable validating the currently open file on save",
            "scope": "window",
            "type": "boolean",
            "default": false
          },
          "opentofu.experimentalFeatures.prefillRequiredFields": {
            "markdownDescription": "Enable autocompletion for required fields when completing OpenTofu blocks. Combine with `#editor.suggest.preview#` and the editor will provide inline snippet suggestions for blocks of code",
            "scope": "window",
            "type": "boolean",
            "default": false
          }
        }
      }
    ],
    "commands": [
      {
        "command": "opentofu.generateBugReport",
        "title": "OpenTofu: Generate Bug Report"
      },
      {
        "command": "opentofu.enableLanguageServer",
        "title": "OpenTofu: Enable Language Server"
      },
      {
        "command": "opentofu.disableLanguageServer",
        "title": "OpenTofu: Disable Language Server"
      },
      {
        "command": "opentofu.init",
        "title": "OpenTofu: init"
      },
      {
        "command": "opentofu.initCurrent",
        "title": "OpenTofu: init current folder",
        "icon": "$(cloud-download)"
      },
      {
        "command": "opentofu.validate",
        "title": "OpenTofu: validate"
      },
      {
        "command": "opentofu.plan",
        "title": "OpenTofu: plan"
      },
      {
        "command": "opentofu.modules.refreshList",
        "title": "Refresh Module Calls",
        "icon": "$(refresh)"
      },
      {
        "command": "opentofu.providers.refreshList",
        "title": "Refresh Module Providers",
        "icon": "$(refresh)"
      },
      {
        "command": "opentofu.modules.openDocumentation",
        "title": "Open Documentation",
        "icon": "$(book)"
      },
      {
        "command": "opentofu.providers.openDocumentation",
        "title": "Open Documentation",
        "icon": "$(book)"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "opentofu.enableLanguageServer",
          "when": "config.opentofu.languageServer.enable == false"
        },
        {
          "command": "opentofu.disableLanguageServer",
          "when": "config.opentofu.languageServer.enable == true"
        },
        {
          "command": "opentofu.init",
          "when": "config.opentofu.languageServer.enable == true"
        },
        {
          "command": "opentofu.initCurrent",
          "when": "config.opentofu.languageServer.enable == true"
        },
        {
          "command": "opentofu.validate",
          "when": "config.opentofu.languageServer.enable == true"
        },
        {
          "command": "opentofu.plan",
          "when": "config.opentofu.languageServer.enable == true"
        },
        {
          "command": "opentofu.modules.refreshList",
          "when": "false"
        },
        {
          "command": "opentofu.providers.refreshList",
          "when": "false"
        },
        {
          "command": "opentofu.modules.openDocumentation",
          "when": "false"
        },
        {
          "command": "opentofu.providers.openDocumentation",
          "when": "false"
        }
      ],
      "view/title": [
        {
          "command": "opentofu.modules.refreshList",
          "when": "view == opentofu.modules",
          "group": "navigation"
        },
        {
          "command": "opentofu.providers.refreshList",
          "when": "view == opentofu.providers",
          "group": "navigation"
        },
        {
          "command": "opentofu.initCurrent",
          "when": "view == opentofu.providers",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "opentofu.modules.openDocumentation",
          "when": "view == opentofu.modules"
        },
        {
          "command": "opentofu.providers.openDocumentation",
          "when": "view == opentofu.providers && viewItem == moduleProviderHasDocs"
        }
      ]
    },
    "views": {
      "opentofu": [
        {
          "id": "opentofu.providers",
          "name": "Providers"
        },
        {
          "id": "opentofu.modules",
          "name": "Module Calls"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "opentofu",
          "title": "OpenTofu",
          "icon": "assets/icons/vs_code_opentofu.svg"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "opentofu.providers",
        "contents": "The active editor cannot provide information about installed providers. [Learn more about providers](https://opentofu.org/docs/language/providers/). You may need to update your language server version."
      },
      {
        "view": "opentofu.modules",
        "contents": "The active editor cannot provide information about installed modules. [Learn more about modules](https://opentofu.org/docs/language/modules/) You may need to run 'tofu get' or update your language server version."
      }
    ]
  },
  "scripts": {
    "prepare": "npm run download:artifacts",
    "compile": "webpack",
    "compile:test": "tsc -p ./",
    "compile:prod": "webpack --mode production --devtool hidden-source-map",
    "watch": "webpack --watch --mode development",
    "web": "npm run compile && vscode-test-web --browserType=chromium --extensionDevelopmentPath=. ./testFixture",
    "web:serve": "npx serve --cors -l 5001",
    "web:tunnel": "npx localtunnel -p 5001",
    "download:artifacts": "ts-node ./build/downloader.ts",
    "vscode:prepublish": "npm run compile:prod",
    "package": "vsce package",
    "test": "npm run compile:test && node ./out/test/runTest.js",
    "test:unit": "jest",
    "test:unit:web": "npm run compile && vscode-test-web --headless --browser=chromium --extensionDevelopmentPath=. --extensionTestsPath=./out/web/test/integration/index.js",
    "lint": "eslint src --ext ts",
    "prettier": "prettier \"**/*.+(js|json|ts)\"",
    "format": "npm run prettier -- --write",
    "check-format": "npm run prettier -- --check"
  },
  "dependencies": {
    "@zodios/core": "^10.9.2",
    "@zodios/plugins": "^10.6.0",
    "axios": "^1.4.0",
    "semver": "^7.5.4",
    "vscode-languageclient": "8.1.0",
    "vscode-uri": "^3.0.7",
    "which": "^4.0.0",
    "zod": "^3.21.4"
  },
  "devDependencies": {
    "@hashicorp/js-releases": "^1.7.1",
    "@playwright/browser-chromium": "^1.39.0",
    "@types/chai": "^4.3.5",
    "@types/glob": "^8.1.0",
    "@types/jest": "^29.5.1",
    "@types/mocha": "^10.0.1",
    "@types/node": "^16.18.36",
    "@types/vscode": "~1.86.0",
    "@types/webpack-env": "^1.18.0",
    "@types/which": "^3.0.0",
    "@typescript-eslint/eslint-plugin": "^7.0.0",
    "@typescript-eslint/parser": "^7.0.0",
    "@vscode/test-electron": "^2.3.8",
    "@vscode/test-web": "^0.0.52",
    "@vscode/vsce": "^2.19.0",
    "assert": "^2.0.0",
    "chai": "^4.3.7",
    "eslint": "^8.40.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^4.2.1",
    "glob": "^10.2.2",
    "got": "^11.8.3",
    "jest": "^29.5.0",
    "mocha": "^10.2.0",
    "msw": "^2.0.0",
    "prettier": "^2.8.8",
    "process": "^0.11.10",
    "ts-jest": "^29.1.0",
    "ts-loader": "^9.4.2",
    "ts-node": "^10.9.1",
    "typescript": "^5.1.3",
    "webpack": "^5.82.0",
    "webpack-cli": "^5.1.1"
  }
}
